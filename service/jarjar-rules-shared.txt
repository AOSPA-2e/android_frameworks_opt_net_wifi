# We don't jar-jar the entire package because, we still use some classes (like
# AsyncChannel in com.android.internal.util) from these packages which are not
# inside our jar (currently in framework.jar, but will be in wifisdk.jar in the future).
rule com.android.internal.util.FastXmlSerializer* com.android.server.x.wifi.util.FastXmlSerializer@1
rule com.android.internal.util.HexDump* com.android.server.x.wifi.util.HexDump@1
rule com.android.internal.util.IState* com.android.server.x.wifi.util.IState@1
rule com.android.internal.util.MessageUtils* com.android.server.x.wifi.util.MessageUtils@1
rule com.android.internal.util.Preconditions* com.android.server.x.wifi.util.Preconditions@1
rule com.android.internal.util.State* com.android.server.x.wifi.util.State@1
rule com.android.internal.util.StateMachine* com.android.server.x.wifi.util.StateMachine@1
rule com.android.internal.util.WakeupMessage* com.android.server.x.wifi.util.WakeupMessage@1
rule com.android.internal.util.XmlUtils* com.android.server.x.wifi.util.XmlUtils@1

rule android.util.KeyValueListParser* com.android.server.x.wifi.util.KeyValueListParser@1
rule android.util.LocalLog* com.android.server.x.wifi.util.LocalLog@1
rule android.util.Rational* com.android.server.x.wifi.util.Rational@1
rule android.util.proto.ProtoStream* com.android.server.x.wifi.util.proto.ProtoStream@1
rule android.util.proto.ProtoOutputStream* com.android.server.x.wifi.util.proto.ProtoOutputStream@1

rule android.os.HandlerExecutor* com.android.server.x.wifi.os.HandlerExecutor@1

# Use our statically linked bouncy castle library
rule org.bouncycastle.** com.android.server.x.wifi.bouncycastle.@1
# Use our statically linked protobuf library
rule com.google.protobuf.** com.android.server.x.wifi.protobuf.@1
# Use our statically linked PlatformProperties library
rule android.sysprop.** com.android.server.x.wifi.sysprop.@1
